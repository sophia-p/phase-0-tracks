#Write a method that takes an array of integers and an integer to search for. You are allowed to use .length and .each.

#
def search_array(arr, num)
  index = 0
  while index < arr.length
    if num == arr[index]
      return index
    end
    index += 1
  end
end

arr = [42, 89, 23, 1]
p search_array(arr, 1)

p search_array(arr, 24)

#Add a method to your file that takes a number of Fibonacci terms to generate and returns an array of the terms. For example, fib(6) would return [0,1,1,2,3,5]. Your method should work for a large number of terms. To verify your work: the last number in the array generated by fib(100) will be 218922995834555169026. (How can you verify this without having to compare this huge number manually? Be smart with your driver code!)

#method that returns [X,Y] --> X+Y = Z --> [X,Y,Z]
def fib(num2)
  fib0 = 0
  fib1 = 1
  fib2 = 1
  fib_arr = [fib0,fib1,fib2]
  while fib_arr.length < num2
    fib3 = fib1+fib2
    fib_arr = fib_arr.push(fib3)
    fib1 = fib2
    fib2 = fib3
  end
  return fib_arr
end

p fib(6)
p fib(100)
p fib(100).last == 218922995834555169026

#Release 2:

#Bubble Sort: 1,4,6,3,2,1 --> 1vs4-->4vs6-->6vs3-->6vs2-->6vs1 = 1,4,3,2,1,6
#-->1vs4-->4vs3-->4vs2-->4vs1-->4vs6 = 1,3,2,1,4,6


#Pseudocode a sorting method that takes an array of integers and uses a sorting algorithm. The method should return a sorted version of the array. Your pseudocode should not be Ruby-specific.

#sort the following numbers from least to greatest: 5,4,6,3,2,1. Compare each number to the number to its immediate right and sort those two numbers from least to greatest. When the comparison is least to greatest, this yields a "true" value. After the last comparison, repeat the comparisons of each set of numbers from the beginning. Finish the comparisons when each of the comparisons yield a "true" value.

#Implement the sorting method in Ruby.

arr3= [5,4,6,3,2,1,0]

def bubble_sort(arr2)
  loop do
    sort = false
    (arr2.length-1).times do |index|
      if arr2[index] > arr2[index+1]
        saved_item = arr2[index+1]
        arr2[index+1] = arr2[index]
        arr2[index] = saved_item
        sort = true
      end
    end
    break if sort == false
  end
  return arr2
end

p bubble_sort(arr3)

